/* Auto-generated by genmsg_cpp for file /home/pixhawk/3dPhotography/mavlink-ros-pkg/lcm_mavlink_ros/msg/COMMAND.msg */
#ifndef LCM_MAVLINK_ROS_MESSAGE_COMMAND_H
#define LCM_MAVLINK_ROS_MESSAGE_COMMAND_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace lcm_mavlink_ros
{
template <class ContainerAllocator>
struct COMMAND_ : public ros::Message
{
  typedef COMMAND_<ContainerAllocator> Type;

  COMMAND_()
  : target_system(0)
  , target_component(0)
  , command(0)
  , confirmation(0)
  , param1(0.0)
  , param2(0.0)
  , param3(0.0)
  , param4(0.0)
  {
  }

  COMMAND_(const ContainerAllocator& _alloc)
  : target_system(0)
  , target_component(0)
  , command(0)
  , confirmation(0)
  , param1(0.0)
  , param2(0.0)
  , param3(0.0)
  , param4(0.0)
  {
  }

  typedef uint8_t _target_system_type;
  uint8_t target_system;

  typedef uint8_t _target_component_type;
  uint8_t target_component;

  typedef uint8_t _command_type;
  uint8_t command;

  typedef uint8_t _confirmation_type;
  uint8_t confirmation;

  typedef float _param1_type;
  float param1;

  typedef float _param2_type;
  float param2;

  typedef float _param3_type;
  float param3;

  typedef float _param4_type;
  float param4;


private:
  static const char* __s_getDataType_() { return "lcm_mavlink_ros/COMMAND"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "37046b16191968dde337704b5cdc8b16"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 target_system\n\
uint8 target_component\n\
uint8 command\n\
uint8 confirmation\n\
float32 param1\n\
float32 param2\n\
float32 param3\n\
float32 param4\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, target_system);
    ros::serialization::serialize(stream, target_component);
    ros::serialization::serialize(stream, command);
    ros::serialization::serialize(stream, confirmation);
    ros::serialization::serialize(stream, param1);
    ros::serialization::serialize(stream, param2);
    ros::serialization::serialize(stream, param3);
    ros::serialization::serialize(stream, param4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, target_system);
    ros::serialization::deserialize(stream, target_component);
    ros::serialization::deserialize(stream, command);
    ros::serialization::deserialize(stream, confirmation);
    ros::serialization::deserialize(stream, param1);
    ros::serialization::deserialize(stream, param2);
    ros::serialization::deserialize(stream, param3);
    ros::serialization::deserialize(stream, param4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(target_system);
    size += ros::serialization::serializationLength(target_component);
    size += ros::serialization::serializationLength(command);
    size += ros::serialization::serializationLength(confirmation);
    size += ros::serialization::serializationLength(param1);
    size += ros::serialization::serializationLength(param2);
    size += ros::serialization::serializationLength(param3);
    size += ros::serialization::serializationLength(param4);
    return size;
  }

  typedef boost::shared_ptr< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator>  const> ConstPtr;
}; // struct COMMAND
typedef  ::lcm_mavlink_ros::COMMAND_<std::allocator<void> > COMMAND;

typedef boost::shared_ptr< ::lcm_mavlink_ros::COMMAND> COMMANDPtr;
typedef boost::shared_ptr< ::lcm_mavlink_ros::COMMAND const> COMMANDConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lcm_mavlink_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37046b16191968dde337704b5cdc8b16";
  }

  static const char* value(const  ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x37046b16191968ddULL;
  static const uint64_t static_value2 = 0xe337704b5cdc8b16ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lcm_mavlink_ros/COMMAND";
  }

  static const char* value(const  ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 target_system\n\
uint8 target_component\n\
uint8 command\n\
uint8 confirmation\n\
float32 param1\n\
float32 param2\n\
float32 param3\n\
float32 param4\n\
";
  }

  static const char* value(const  ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target_system);
    stream.next(m.target_component);
    stream.next(m.command);
    stream.next(m.confirmation);
    stream.next(m.param1);
    stream.next(m.param2);
    stream.next(m.param3);
    stream.next(m.param4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct COMMAND_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lcm_mavlink_ros::COMMAND_<ContainerAllocator> & v) 
  {
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "confirmation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confirmation);
    s << indent << "param1: ";
    Printer<float>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<float>::stream(s, indent + "  ", v.param2);
    s << indent << "param3: ";
    Printer<float>::stream(s, indent + "  ", v.param3);
    s << indent << "param4: ";
    Printer<float>::stream(s, indent + "  ", v.param4);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LCM_MAVLINK_ROS_MESSAGE_COMMAND_H

